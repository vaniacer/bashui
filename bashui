#!/bin/bash
#--------------------------------------------------------------------+
#Color picker, usage: printf $BLD$CUR$RED$BBLU'Hello World!'$DEF     |
#-------------------------+--------------------------------+---------+
#       Text color        |       Background color         |         |
#-----------+-------------+--------------+-----------------+         |
# Base color|Lighter shade| Base color   | Lighter shade   |         |
#-----------+-------------+--------------+-----------------+         |
BLK='\e[30m'; blk='\e[90m'; BBLK='\e[40m'; bblk='\e[100m' #| Black   |
RED='\e[31m'; red='\e[91m'; BRED='\e[41m'; bred='\e[101m' #| Red     |
GRN='\e[32m'; grn='\e[92m'; BGRN='\e[42m'; bgrn='\e[102m' #| Green   |
YLW='\e[33m'; ylw='\e[93m'; BYLW='\e[43m'; bylw='\e[103m' #| Yellow  |
BLU='\e[34m'; blu='\e[94m'; BBLU='\e[44m'; bblu='\e[104m' #| Blue    |
MGN='\e[35m'; mgn='\e[95m'; BMGN='\e[45m'; bmgn='\e[105m' #| Magenta |
CYN='\e[36m'; cyn='\e[96m'; BCYN='\e[46m'; bcyn='\e[106m' #| Cyan    |
WHT='\e[37m'; wht='\e[97m'; BWHT='\e[47m'; bwht='\e[107m' #| White   |
#-------------------------{ Effects }----------------------+---------+
DEF='\e[0m'   #Default color and effects                             |
BLD='\e[1m'   #Bold\brighter                                         |
DIM='\e[2m'   #Dim\darker                                            |
CUR='\e[3m'   #Italic font                                           |
UND='\e[4m'   #Underline                                             |
INV='\e[7m'   #Inverted                                              |
COF='\e[?25l' #Cursor Off                                            |
CON='\e[?25h' #Cursor On                                             |
#------------------------{ Functions }-------------------------------+
# Text positioning, usage: XY 10 10 'Hello World!'                   |
XY  (){ printf -- "\e[$2;${1}H$3"; }                                #|
# Print line, usage: line - 10 | line -= 20 | line 'Hello World!' 20 |
line(){ printf -v _L %$2s; printf -- "${_L// /$1}"; }               #|
# Create sequence like {0..(X-1)}, usage: que 10                     |
que (){ printf -v _N %$1s; _N=(${_N// / 1}); printf "${!_N[*]}"; }  #|
#--------------------------------------------------------------------+
sand=( ⠁  ⠂  ⠄  ' ' )
#  {   small digits    }
sd=(₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉)
bs='⠴⠷⠦' # bottom sand pile
ts='⠖'    #  top  sand pile
WAIT(){
    local x=$[COLUMNS/2-3]
    local y=$[  LINES/2-3]
    clear; cursor off; i=0; start=$SECONDS
    XY $[x-1]  $y    $UND$BLD$RED'       '$DEF                     # _______
    XY $[x-1] $[y+1]         $RED'╲'$DIM$UND'     '$DEF$red'╱'$DEF # ╲_____╱
    XY  $x    $[y+2]         $BLU'(  '$BLD$WHT'•'$BLD$BLU')'$DEF   #  (  •)
    XY  $x    $[y+3]         $BLU' ╲'$YLW"$ts"$BLD$BLU'╱'$DEF      #   ╲⠖╱
    XY  $x    $[y+4]         $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF  #   ╱⠂╲
    XY  $x    $[y+5]         $BLU'('$YLW"$bs"$BLD$BLU')'$DEF       #  (⠴⠷⠦)
    XY $[x-1] $[y+6]         $RED'╱'$RED'‾‾‾‾‾'$BLD$RED'╲'$DEF     # ╱‾‾‾‾‾╲
    XY $[x-1] $[y+7]     $DIM$RED'‾‾‾‾‾‾‾'$DEF                     # ‾‾‾‾‾‾‾
    ( while true; do sleep 0.07
        printf -v counter "%03d" $[SECONDS-start]
        small="${sd[${counter:0:1}]}${sd[${counter:1:1}]}${sd[${counter:2:1}]}"
        XY $[x-1] $[y+1] $RED'╲'$DIM$UND" $small "$DEF$red'╱'$DEF
        XY  $x    $[y+4] $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF
        ((i++)); (($i==${#sand[@]})) && i=0;
    done ) & waiter=$!
}
GO() { [[ -e /proc/$waiter ]] && kill $waiter; cursor on; clear; }
#------------------------{ Useful functions }---------------------------------------------------------------------------
pause(){
    local  mess=${1:-'press any key to continue'}
    printf "\n$COF$BLD$mess\n"
    read   -srn1
    printf "\n$DEF$CON"
}

cursor(){
    case $1 in
         on) stty  echo; printf "$CON";;
        off) stty -echo; printf "$COF";;
    esac
}

bye(){
    cursor on
    [[ $1 ]] && printf -- "$1\n"
    exit
}
trap 'bye' INT HUP TERM EXIT

#------------------------{ UI elements }--------------------------------------------------------------------------------
_target_=()
_button_=()
_action_=
_animation_enabled_=1
_animation_speed_=0.05

button(){
    # Main button function
    local a=0
    local x=${1:-1} # X(row)  coordinate
    local y=${2:-1} # Y(line) coordinate
    local name=$3   # button Name
    local func=$4   # Function to run
    local tc=$5     # Text Color
    local rc=$6     # boRder Color
    local gc=$7     # backGround Color
    local line=${name//[[:print:]]/-}
    [[ $1 == "name" ]] && { printf -- "$name"; return; }
    [[ $_button_    == "$name" ]] && gc="$INV$gc"
    [[ $_animation_ == "$name" ]] && {
        a=1
        while ((a>0)); do
            XY $x  $y      "$rc  ${line//-/ }  $DEF"
            XY $x $[y+a]   "$rc┌─$line─┐$DEF"
            XY $x $[y+a+1] "$rc│$gc$tc $name $DEF$rc│$DEF"
            XY $x $[y+a+2] "$rc└─$line─┘$DEF"
            sleep $_animation_speed_
            ((a--))
        done
    }

    XY $x  $y    "$rc┌─$line─┐$DEF"
    XY $x $[y+1] "$rc│$gc$tc $name $DEF$rc│$DEF"
    XY $x $[y+2] "$rc├─$line─┤$DEF"
    XY $x $[y+3] "$DIM$rc└─$line─┘$DEF"

    _func_name_=$func
    _butt_name_=$name
}
# Don't copy or modify button function unless you know what you are doing, create a wrapper function instead like this:
#    defb(){
         # Create default button to copy
         #1 X(row)  coordinate
         #2 Y(line) coordinate
         #3 Button name
         #4 Function to run
         #5 Text color
         #6 Border color
         #7 Background color
#        #           1    2      3          4          5      6      7
#        button    "$1" "$2" "butt $3" "fun_${3,,}" "$wht" "$ylw" "$bblk"
#    }
#
# then use it like this:
#    but_a(){ defb "$1" "$2" A; }
#    but_b(){ defb "$1" "$2" B; }
#    ...


animate_button(){
     [[ $_animation_enabled_ ]] && _animation_=$_button_ $1
         _animation_=
}

press_button(){
    animate_button $1
    $_action_
}

enable_button(){
    _action_=$_func_name_
    _button_=("$_butt_name_" $1 $_func_name_)
}

default_button(){
    $1 &> /dev/null
    enable_button $1
}

select_next_butt(){
    local button   buttons=( "$@" )
    local i j n=${#buttons[@]}
    local found=false

    for ((i=0,j=1; i<n; i++,j++)); do
        button=${buttons[i]}
        $button &> /dev/null

        [[ $_button_ == "$_butt_name_" ]] && {
            found=true
            [[ ${buttons[j]} ]] && { # set next selection
                button=${buttons[j]}
                $button &> /dev/null
                enable_button $button
                return
            }
        }
    done
    # rollover again
    ${buttons[0]} &> /dev/null
    enable_button $button
}

select_prev_butt(){
    local button   buttons=( "$@" )
    local i j n=${#buttons[@]}
    local found=false

    for ((i=$[n-1],j=$[n-2]; i>0; i--,j--)); do
        button=${buttons[i]}
        $button &> /dev/null

        [[ $_button_ == "$_butt_name_" ]] && {
            found=true
            [[ ${buttons[j]} ]] && { # set next selection
                button=${buttons[j]}
                $button &> /dev/null
                enable_button $button
                return
            }
        }
    done
    # rollover again
    ${buttons[$[n-1]]} &> /dev/null
    enable_button $button
}

x_row(){
    # Create horizontal row of elements
    local ani=$_animation_
    local y=${1:-1}; shift
    local item name count x i n=$#
    ((y>(LINES-3))) && y=$((LINES-3))

    for item; { name=$($item name); ((count+=${#name}+5)); }
    x=$(( (COLUMNS-count)/2 )) i=0 _animation_=
    ((x<0)) && x=1

    for  item; do
        name=$($item name)
        [[ $_animation_enabled_ && $ani == $_button_ ]] && _animation_=$_button_
        $item "$((x+i))" "$y"
        ((i+=${#name}+5))
    done
}

y_row(){
    # Create vertical row of elements
    local ani=$_animation_
    local x=${1:-1}; shift
    local item count y i n=$#
    for   item; { ((count+=3)); }
    y=$((LINES-count-3)) y=$((y/(n+1))) i=0
    _animation_=

    for item; do
        $item  &>  /dev/null
        [[ $_animation_enabled_ && $ani == $_button_ ]] && _animation_=$_button_
        $item "$x" "$((y+i))"
        ((i+=y+4))
    done
}

decolorizer(){
    local  name=$2
    local  data=${1//\\e\[?m}
    data=${data//\\e\[??m}
    data=${data//\\e\[???m}
    printf -v $name -- "$data"
}

center_print(){
    local width=$1
    local text=$2
    local fill=${3:-\ }
    local decolorized_text
    decolorizer "$text" decolorized_text
    local tl=${#decolorized_text}
    (( (width-tl)<0 )) && {                          # check if text is
        text="${text:0:($[width-9])}...${text:(-2)}" # too looooooooong
        decolorizer "$text" decolorized_text
        tl=${#decolorized_text}
    }

    local left=$(((width-tl)/2))
    local right=$((width-(left+tl)))
    local     spaces
    printf -v spaces -- "%${left}s_TEXT_%${right}s"
    local result=${spaces// /$fill}
    printf -- "${result//_TEXT_/$text}"
}

items(){
    # Main items piker function
    local   x=${1:-1}        # X(row)  coordinate
    local   y=${2:-1}        # Y(line) coordinate
    local   w=${3:-$COLUMNS} # window Width
    local   h=${4:-5}        # window Height, min is 5
         nclm=($5)           # Number of Columns or columns sizes in % of Width
    local name=$6            # List Name
    local   tc=$7            # Text Color
    local   rc=$8            # boRder Color
    local   gc=$9            # backGround Color
    shift       9
    local data=("$@")
    local text c i w z column_size=()

    [[ $_currentItem_ ]] || _currentItem_=0

    ((w-=x))
    ((${#nclm[@]}>1)) && {
        for i in ${nclm[@]}; { column_size+=( $((w*i/100)) ); }
        z=${column_size[@]}
        w=$((${z// /+}))
        nclm=${#nclm[@]}
    }

    ((${#nclm[@]}>1)) || {
        column_size=$((w/nclm))
        w=$((column_size*nclm))
        for ((i=1; i<nclm; i++)); { column_size+=(column_size); }
    }

    # Print Heading
    local c1='┌' c2='┐'
    [[ $name ]] && {
        c1='├' c2='┤'
        XY $x $y "$rc┌$(line '─' $w)┐$DEF"; ((y++))
        XY $x $y "$DEF$INV$rc│$DEF$INV$tc$(center_print $w "$name")$DEF$INV$rc│$DEF" ; ((y++))
    }

    # Print column's titles
    local row=( "${data[@]:0:nclm}" )
    for r in "${!row[@]}"; {
        item=${row[r]}
        cs=${column_size[r]:-column_size}
        text+="$DEF$rc$c1$(center_print $((cs-1)) "{ $item }" '─')$DEF"
        text=${text//"{ "/"{ $DEF$tc"}; text=${text//" }"/"$DEF$rc }"}; c1='┬'
    };  XY $x $y "$text$rc─$c2"; ((y++))

    # Print data
    data=(  "${data[@]:$nclm}" )
    local n=${#data[@]}
    local rows_avail=$((h-4))
    local rows_total=$((n/nclm))
    local current_row=$((_currentItem_/nclm))
    _page_=$((rows_avail-1)) # pgUP/DOWN jump calculation
    ((rows_avail>rows_total)) && rows_avail=$rows_total _page_=$((rows_total-1))

    j=0; ((current_row>=rows_avail)) && j=$((_currentItem_+nclm-rows_avail*nclm))
    for ((i=j; i<rows_avail*nclm+j; i+=nclm)); do
        row=( "${data[@]:i:nclm}" )
        sel=

        ((i==_currentItem_)) && {
            sel=$INV
            decolorizer "${row[0]}" "_target_"
            _target_=(  "$_target_" "${row[@]:1}" )
        }

        text=
        for r in "${!row[@]}"; {
            item=${row[r]}
            cs=${column_size[r]:-column_size}
            decolorizer "$item"  decolorized_item
            color=$((${#item}-${#decolorized_item}))
            actual_color=${item:0:$color}
            ((${#decolorized_item}>=$cs-1)) && decolorized_item="${decolorized_item:0:$[cs-5]}..." item=$decolorized_item color=0
            ((r==0)) && {
                 [[ $item ]] || ((color++))
                 printf -v new_text "$DEF$rc│$DEF$sel$gc %s$DEF$sel$gc$tc%-$((cs-3+color))s" "$INV$BLD${decolorized_item:0:1}" "$actual_color${decolorized_item:1}"
            } || printf -v new_text "$DEF$rc│$DEF$sel$gc $tc%-$((cs-2+color))s" "$item"
            text+=$new_text
        }
        text="$text $DEF$rc│$DEF\n"
        XY $x $y "$text"; ((y++))
    done

    # Print last line
    last_line=
    for cs in "${column_size[@]}"; {
        printf -v tmp_line "%$((cs-1))s┴"; tmp_line=${tmp_line// /─}
        last_line+=$tmp_line
    }
#    printf -v last_line "%$((column_size-1))s┴" "${row[@]//*/''}"; last_line=${last_line// /─}
    XY $x $y "$DEF$rc└${last_line%┴*}─┘$DEF"
    # Show current row out of total rows if not all rows displayed
    ((rows_avail<rows_total)) && { hint="{ $((current_row+1)) of $rows_total }"; XY $((w/2+x-${#hint}/2)) $y "$hint"; }
}
# Don't copy or modify items function unless you know what you are doing, create a wrapper function instead like this:
#    test_data(){
         #1 X(row)  coordinate
         #2 Y(line) coordinate
         #3 Window width
         #4 Window height, min is 5
         #5 Number of columns
         #6 Name of the list
         #7 Text color
         #8 Border color
         #9 Background color
         #     1  2        3        4  5       6            7      8      9    data
#        items 10 5 $((COLUMNS-10)) 10 3 "Test data set" "$wht" "$ylw" "$bblk" "$@"
#    }
#
# add some data:
#    data=(
#        #--------------{ first line columns description }---------------------
#        'Item name'            'Item description'                     'Status'
#        #-----------------------{ the data }----------------------------------
#        'first'                'Long description text'                'true'
#        'second'               'Description 2'                        'O_o'
#        # ...
#        'row1'                 'Long description text'                'true'
#        'last'                 'Description 2'                        'O_o'
#    )
#
# and use it like this:
#    test_data_items(){ test_data "${data[@]}"; }


select_next_item(){
    local a=1 fast=
    [[ ${1,,} == '--fast' ]] && { fast=1; a=$_page_; shift 1;}
    local n=$(($#-nclm))
    local data=("${@:nclm+1}")
    local nextItem=$((_currentItem_+nclm*a))
    ((nextItem > (n-nclm))) && { [[ $fast ]] && nextItem=$((n-nclm)) || nextItem=0; }
    [[ ${data[nextItem]} ]] || ((nextItem+=nclm))
    _currentItem_=$nextItem
}

select_prev_item(){
    local a=1 fast=
    [[ ${1,,} == '--fast' ]] && { fast=1; a=$_page_; shift 1;}
    local n=$(($#-nclm))
    local data=("${@:nclm+1}")
    local prevItem=$((_currentItem_-nclm*a))
    ((prevItem <  0)) && { [[ $fast ]] && prevItem=0 || prevItem=$((n-nclm)); }
    [[ ${data[prevItem]} ]] || ((prevItem-=nclm))
    _currentItem_=$prevItem
}

select_by_hot_key(){
    local i item
    local key=${1,,}; shift
    local data=("${@:nclm+1}")
    local end=${#data[@]}
    for ((i=$_currentItem_+nclm; i<end; i+=nclm)); do
        decolorizer "${data[i]}" item
        [[ ${item,,} =~ ^$key ]] && { _currentItem_=$i; return; }
    done
    for ((i=0; i<_currentItem_; i+=nclm)); do
        decolorizer "${data[i]}" item
        [[ ${item,,} =~ ^$key ]] && { _currentItem_=$i; return; }
    done
}

reader(){
    # User input reader function
    local x=1                    # X(row)  coordinate
    local y=${1:-1}              # Y(line) coordinate
    local n=$2                   # Number of symbols to read
    local name=$3                # Reader Name
    local varn=${4:-_r_}         # Name of the variable to read to
    local value=$5               # Preset value
    local tc=$6                  # Text Color
    local rc=$7                  # boRder Color
    local gc=$8                  # backGround Color
    local r=$(((n-1)/COLUMNS+1)) # calculate number of Rows needed to print all symbols

    local top_line
    local bot_line
    local w=$((COLUMNS-2))
    printf -v top_line "%${w}s"; top_line=${top_line// /─}
    [[ $name ]] && {
        local test="{ $name }"
        ((${#test}>w)) && w=${#test}
        top_line=$(center_print $w "$test" ─)
        top_line=${top_line//$test/"{ $tc$name $DEF$rc}"}
    }
    printf -v bot_line "%${w}s"; bot_line=${bot_line// /─}

                             XY $x  $y      "$rc+$top_line+$DEF"
    for ((i=0; i<r; i++)); { XY $x $[y+1+i] "$gc$tc%${COLUMNS}s$DEF"; }
                             XY $x $[y+1+i] "$rc+$bot_line+$DEF"
                             XY $x $[y+i]   "$DEF$gc$tc"
                             XY $x $[y+1]   ''
    cursor on
    read -srn$n -i "$value" -e $varn
    cursor off
    printf "$DEF"
}

# Don't copy or modify reader function unless you know what you are doing, create a wrapper function instead like this:
# my_reader(){
#     local name=$1 # Reader Name
#     local coll=$2 # Number of symbols to read
#     local varn=$3 # Name of the variable to read to
#     local valu=$4 # Preset value
#     reader $((LINES/2)) $coll "$name" $varn "$valu" "$wht" "$ylw" "$bblk"
# }
#
# then use it like this:
# my_reader 'Enter filtering pattern' $COLUMNS items_filter "$items_filter"
#    ...
# my_reader 'Set new group(file) name:' $COLUMNS new_group "$new_group"
#    ...

#------------------------{ Input grabber }------------------------------------------------------------------------------
read_input(){
    read -rsN1 _input_
    case ${_input_,,} in
                  # One symbol keys support
#                 w*) _input_=up   ;; # optional
#                 a*) _input_=left ;; # WASD keys
#                 s*) _input_=down ;; # or others
#                 d*) _input_=right;; # as cursor
                ' '*) _input_=space;;
              $'\t'*) _input_=tab  ;;
              $'\n'*) _input_=enter;;
            # escape sequences additional check
            $'\u1b'*) read -rsN4 -t 0.001 _input_
                      case ${_input_,,} in
                                   # arrows, pgUp/Down and escape support
                                   *a*) _input_=up    ;;
                                   *b*) _input_=down  ;;
                                   *d*) _input_=left  ;;
                                   *c*) _input_=right ;;
                                   *5*) _input_=pgup  ;;
                                   *6*) _input_=pgdown;;
                                    '') _input_=escape;;
                      esac;;
                   *) _input_=${_input_,,}
                      _input_=${_input_:0:1};;
    esac
}
